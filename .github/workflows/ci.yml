name: CI
on:
  - push
  - pull_request

env:
  HUSKY: 0
  FORCE_COLOR: 3

jobs:
  tag:
    name: Release Tag
    runs-on: ubuntu-latest
    steps:
      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
      - name: Generate release tag
        id: release-tag
        run: echo "tag=${{ github.ref_name }}@$(date +%Y-%m-%d_%H.%M.%S)_$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Convert to Docker tag
        id: docker-tag
        run: echo "tag=$(echo ${{ steps.release-tag.outputs.tag }} | sed 's/[^a-zA-Z0-9._-]/_/g')" >> $GITHUB_OUTPUT
      - name: Display release tag
        run: echo "::notice title=Release Tag::${{ steps.release-tag.outputs.tag }}"
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
      tag: ${{ steps.release-tag.outputs.tag }}
      docker-tag: ${{ steps.docker-tag.outputs.tag }}

  ci:
    name: Integration
    runs-on: ubuntu-latest
    needs: tag
    env:
      RELEASE_TAG: ${{ needs.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: pnpm

      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo
          key: turbo-${{ github.sha }}

      - name: Install dependencies
        run: pnpm install

      - name: Configure env
        run: cp ./packages/server/.env.example ./packages/server/.env

      - name: Lint
        run: pnpm lint

      - name: Unit tests
        run: pnpm test

      - name: Type checking
        run: pnpm typecheck

      # - name: Send test coverage to codecov
      #   continue-on-error: true
      #   uses: codecov/codecov-action@v2

      - name: Get server version
        id: server-pkg
        run: echo "version=$(cat packages/server/package.json | jq -jr '.version')" >> $GITHUB_OUTPUT

      - name: Build (NPM)
        run: pnpm build:npm

      - name: Build (Docker)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: packages/server/Dockerfile
          build-args: |
            RELEASE_TAG=${{ env.RELEASE_TAG }}
            BUILD_URL=https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ needs.tag.outputs.timestamp }}
            org.opencontainers.image.version=${{ steps.server-pkg.outputs.version }}
          tags: |
            e2esdk/server:ci
            e2esdk/server:${{ needs.tag.outputs.docker-tag }}
          push: false

      - name: Display Docker image labels
        run: |
          echo "::notice title=Docker labels::$(  \
            docker inspect e2esdk/server:${{ needs.tag.outputs.docker-tag }} --format='{{json .Config.Labels}}' \
            | sed \
              -e 's/^{"//' -e 's/"}$//' \
              -e 's/\",\"/\n/g'         \
              -e 's/":"/: /g'           \
          )"

        # 1. Drop the object curly braces (and surrounding quotes)
        # 2. Replace entry separators by newlines (and drop surrounding quotes)
        # 3. Replace key:value separators with spaces (and drop surrounding quotes)

      # - name: Functional tests
      #   run: pnpm e2e

      # - name: Build to lib folder for archives
      #   run: pnpm build --outDir lib

      # - name: Archive lib components
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: components
      #     path: lib/
