name: CI/CD
on:
  push:

env:
  FORCE_COLOR: 3

# Cancel in-progress runs on new updates,
# except for deployment runs which could
# leave the app in an inconsistent state.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.ref_name != 'main' && github.ref_name != 'beta' }}

jobs:
  ci:
    name: Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: pnpm

      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        with:
          path: node_modules/.cache/turbo
          key: turbo-${{ github.sha }}

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Unit tests
        run: pnpm test

      - name: Type checking
        run: pnpm typecheck

      - name: Build (NPM)
        run: pnpm build:npm

      - name: Build (Docker)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: packages/server/Dockerfile
          push: false

  # ----------------------------------------------------------------------------

  cd:
    name: Release
    runs-on: ubuntu-latest
    needs: [ci]
    # todo: Enable main release channel once v1 is ready
    # if: ${{ github.ref_name == 'main' || github.ref_name == 'beta' }}
    if: ${{ github.ref_name == 'beta' }}
    steps:
      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: pnpm

      # Note: we do not use an external Turbo cache for publishing
      # to prevent against possible cache collision attacks.

      - name: Install dependencies
        run: pnpm install

      # NPM publish --

      - name: Build (NPM)
        run: pnpm build:npm

      - name: Publish (NPM)
        run: npx multi-semantic-release --ignore-packages="config/**,examples/**"
        env:
          GITHUB_TOKEN: ${{ github.token }}
          NPM_TOKEN: ${{ secrets.SOCIALGROOVYBOT_NPM_TOKEN}}
          GIT_AUTHOR_NAME: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.SOCIALGROOVYBOT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.SOCIALGROOVYBOT_EMAIL }}

      # Docker release --

      # When the server package needs to be published,
      # the internal @socialgouv/e2esdk-semantic-release plugin
      # will store the new version number into the
      # `server-needs-publishing` file at the repo root.
      # We detect its presence and store the version
      # in a step output, which will determine whether
      # the Docker build+push step occurs or not.
      - name: Check if server needs publishing
        id: server-needs-publishing
        run: |
          if test -f server-needs-publishing;
          then
            echo "version=$(cat server-needs-publishing)" >> $GITHUB_OUTPUT;
          fi

      - name: Docker registry authentication
        uses: docker/login-action@v2
        if: ${{ steps.server-needs-publishing.outputs.version }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # todo: Use docker/metadata-action to organise tags & labels
      - name: Build & Publish (Docker)
        uses: docker/build-push-action@v3
        if: ${{ steps.server-needs-publishing.outputs.version }}
        with:
          context: .
          file: packages/server/Dockerfile
          build-args: |
            BUILD_URL=https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          labels: |
            org.opencontainers.image.title=@socialgouv/e2esdk-server
            org.opencontainers.image.description=End-to-end encryption server
            org.opencontainers.image.version=${{ steps.server-needs-publishing.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.timestamp.outputs.timestamp }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.source=https//github.com/SocialGouv/e2esdk/tree/${{ github.sha }}
            org.opencontainers.image.documentation=https://github.com/SocialGouv/e2esdk/blob/main/packages/server/README.md
          tags: |
            ghcr.io/socialgouv/e2esdk/server:${{ github.ref_name == 'main' && 'latest' || 'beta' }}
            ghcr.io/socialgouv/e2esdk/server:${{ steps.server-needs-publishing.outputs.version }}
            ghcr.io/socialgouv/e2esdk/server:git-${{ github.ref_name }}-${{ github.sha }}
          push: true

      - name: Display Docker image labels
        if: ${{ steps.server-needs-publishing.outputs.version }}
        run: |
          docker inspect ghcr.io/socialgouv/e2esdk/server:git-${{ github.ref_name }}-${{ github.sha }} --format='{{json .Config.Labels}}' \
          | sed \
            -e 's/^{"//' -e 's/"}$//' \
            -e 's/\",\"/\n/g'         \
            -e 's/":"/: /g'
        # 1. Drop the object curly braces (and surrounding quotes)
        # 2. Replace entry separators by newlines (and drop surrounding quotes)
        # 3. Replace key:value separators with spaces (and drop surrounding quotes)
